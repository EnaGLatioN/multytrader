# Generated by Django 5.2.4 on 2025-08-23 12:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import encrypted_model_fields.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('exchange', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExchangeAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Уникальный идентификатор', primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', encrypted_model_fields.fields.EncryptedCharField(help_text='API ключ', verbose_name='API ключ')),
                ('secret_key', encrypted_model_fields.fields.EncryptedCharField(help_text='Секретный ключ', verbose_name='Секретный ключ')),
                ('login', models.CharField(help_text='Логин для аутентификации', max_length=128, verbose_name='Логин')),
                ('password', encrypted_model_fields.fields.EncryptedCharField(help_text='Пароль для аутентификации', verbose_name='Пароль')),
                ('is_active', models.BooleanField(default=True, help_text='Активен ли аккаунт', verbose_name='Активность')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания', verbose_name='Дата создания')),
                ('exchange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exchange_account_exchange', to='exchange.exchange', verbose_name='Биржа')),
            ],
            options={
                'verbose_name': 'Биржевый аккаунт',
                'verbose_name_plural': 'Биржевые аккаунты',
                'db_table': 'exchange_account',
                'ordering': ['login'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('maximum_amount', models.PositiveIntegerField(blank=True, help_text='Максимальная сумма в рублях', null=True, verbose_name='Максимальная сумма')),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_groups', to='auth.group', verbose_name='Группы')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions', to='auth.permission', verbose_name='Разрешения')),
                ('wallet_pairs', models.ManyToManyField(blank=True, null=True, related_name='customuser_wallet_pairs', to='exchange.walletpair', verbose_name='Валютные пары')),
                ('exchange_account', models.ManyToManyField(blank=True, null=True, related_name='user_exchange_account', to='trader.exchangeaccount', verbose_name='Биржевый аккаунт')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Proxy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='Уникальный идентификатор', primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(help_text='IP адрес прокси-сервера', verbose_name='IP адрес')),
                ('port', models.PositiveIntegerField(help_text='Порт для подключения к прокси', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='Порт')),
                ('login', models.CharField(help_text='Логин для аутентификации', max_length=128, verbose_name='Логин')),
                ('password', encrypted_model_fields.fields.EncryptedCharField(help_text='Пароль для аутентификации', verbose_name='Пароль')),
                ('is_active', models.BooleanField(default=True, help_text='Активен ли прокси', verbose_name='Активность')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания', verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Прокси',
                'verbose_name_plural': 'Прокси',
                'db_table': 'proxy',
                'ordering': ['-created_at'],
                'constraints': [models.UniqueConstraint(fields=('ip_address', 'port', 'login', 'password'), name='unique_data_proxy')],
            },
        ),
    ]
