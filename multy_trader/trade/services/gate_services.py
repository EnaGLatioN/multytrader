import ccxt
import logging
from trade.bot import send_telegram_message

from trade.models import TradeType
from multy_trader.settings import GATE_HOST
from utils import get_wallet_pair


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def gate_buy_futures_contract(entry, order):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ GATE –ø–æ –º–∞—Ä–∫–µ—Ç—É
    """

    # amount = entry.profit if order.trade_type == TradeType.LONG else -entry.profit
    exchange_account = order.exchange_account
    symbol = get_wallet_pair(entry.wallet_pair, exchange_account.exchange.name)

    proxy = order.proxy

    try:
        exchange = ccxt.gate({
            'apiKey': exchange_account.api_key,
            'secret': exchange_account.secret_key,
            'enableRateLimit': True,
            'proxies': proxy.get_proxies() if proxy else None
        })

        exchange.options['defaultType'] = 'swap'
        exchange.options['defaultSettle'] = 'usdt'

        if not close_position(exchange, symbol, entry):
            try:
                exchange.set_leverage(
                    leverage=entry.shoulder,
                    symbol=symbol
                )
                logger.info(f"–ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {entry.shoulder}x")
            except ccxt.BaseError as leverage_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ {entry.shoulder}x: {leverage_error}")
            order_params = {
                'symbol': symbol,
                'type': 'market',
                'side': 'buy' if order.trade_type == TradeType.LONG else 'sell',
                'amount': entry.profit,
                'params': {
                    'timeInForce': 'IOC',
                }
            }

            order_response = exchange.create_order(**order_params)
            logger.info(f"‚úÖ –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ —Å –ø–ª–µ—á–æ–º {entry.shoulder}x: {order_response}")
            order.ex_order_id = order_response.get('id', None)
            order.save()
            return order_response

    except ccxt.BaseError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        send_telegram_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}", entry.chat_id)


def close_position(exchange, symbol, entry):
    try:
        logger.info(f"üîç –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")

        # üî• –ü–û–õ–£–ß–ê–ï–ú –¢–ï–ö–£–©–£–Æ –ü–û–ó–ò–¶–ò–Æ
        positions = exchange.fetch_positions([symbol])

        current_position = None
        for position in positions:
            # logger.info(f"–¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò {position}")
            if position.get("info").get('contract') == symbol and position['contracts'] > 0:
                current_position = position
                break

        if not current_position:
            logger.info(f"üîç –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {symbol}")
            return False  # –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∑–∞–∫—Ä—ã—Ç–∞

        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {current_position}")

        # üî• –û–ü–†–ï–î–ï–õ–Ø–ï–ú –°–¢–û–†–û–ù–£ –î–õ–Ø –ó–ê–ö–†–´–¢–ò–Ø
        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è LONG - –∑–∞–∫—Ä—ã–≤–∞–µ–º SELL, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        side = 'sell' if current_position['side'] == 'long' else 'buy'
        amount = abs(current_position['contracts'])

        logger.info(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é: {side} {amount} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")

        # üî• –†–ê–ó–ú–ï–©–ê–ï–ú –ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–´–ô –û–†–î–ï–†
        close_order_params = {
            'symbol': symbol,
            'type': 'market',
            'side': side,
            'amount': amount,
            'params': {
                'reduceOnly': True,  # ‚ö†Ô∏è –í–ê–ñ–ù–û: —Ç–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                'timeInForce': 'IOC',
            }
        }

        close_response = exchange.create_order(**close_order_params)
        logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {close_response}")
        return True

    except ccxt.BaseError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        send_telegram_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}", entry.chat_id)
