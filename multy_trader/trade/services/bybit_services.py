import ccxt
import logging

from trade.models import TradeType
from multy_trader import settings


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)



def bybit_buy_futures_contract(entry, order):

    """
    –ü–æ–∫—É–ø–∫–∞ —Ñ—å—é—á–µ—Ä—Å–∞ –Ω–∞ Bybit mainnet

    :param api_key: API –∫–ª—é—á –æ—Ç mainnet
    :param api_secret: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç mainnet
    :param symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTC/USDT:USDT)
    :param amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    :param order_type: 'market' –∏–ª–∏ 'limit'
    :param price: –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    :param leverage: –ü–ª–µ—á–æ
    :param reduce_only: –¢–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–¥–µ—Ä–∞
    """
    exchange_account = order.exchange_account
    proxy = order.proxy

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è mainnet
        exchange = ccxt.bybit({
            'apiKey': exchange_account.api_key,
            'secret': exchange_account.secret_key,
            'sandbox': False,  # FALSE –¥–ª—è mainnet!
            'proxies': proxy.get_proxies() if proxy else None,
            'options': {
                'defaultType': 'linear',
            },
            'enableRateLimit': True,
        })
        logger.debug(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏: {exchange.proxies}")
        logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit mainnet...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
        # markets = exchange.load_markets()

        # balance = exchange.fetch_balance()
        # usdt_balance = balance['total'].get('USDT', 0)
        # logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance}")

        try:
            exchange.set_leverage(entry.shoulder, entry.wallet_pair.slug)
            logger.info(f"‚öñÔ∏è –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {entry.shoulder}x")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ: {e}")

        order_params = {
            'symbol': entry.wallet_pair.slug,
            'type': 'market',
            'side': 'buy' if order.trade_type == TradeType.LONG else 'sell',
            'amount': entry.profit,
            'params': {
                'reduceOnly': False,
            }
        }

        # –î–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
        # if order_type == 'limit' and price is not None:
        #     order_params['price'] = price

        logger.info(f"üõí –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä: {order_params}")

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
        order = exchange.create_order(**order_params)

        logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ID: {order['id']}")
        return {
            'success': True,
            'order_id': order['id'],
            'symbol': order['symbol'],
            'side': order['side'],
            'type': order['type'],
            'amount': order['amount'],
            'price': order.get('price'),
            'status': order['status']
        }

    except ccxt.AuthenticationError as e:
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:"
        error_msg += "\n1. –ö–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ https://www.bybit.com/"
        error_msg += "\n2. –í–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ Trade"
        error_msg += "\n3. –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ IP"
        error_msg += f"\n–î–µ—Ç–∞–ª–∏: {e}"
        logger.error(error_msg)
        return {'success': False, 'error': error_msg}

    except ccxt.InsufficientFunds as e:
        error_msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {e}"
        logger.error(error_msg)
        return {'success': False, 'error': error_msg}

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {e}"
        logger.error(error_msg)
        return {'success': False, 'error': error_msg}



def get_balance_mainnet(api_key: str, api_secret: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ mainnet"""
    exchange = ccxt.bybit({
        'apiKey': api_key,
        'secret': api_secret,
        'sandbox': False,
    })

    balance = exchange.fetch_balance()
    return balance



    """ LOGS
    INFO:__main__:üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit mainnet...
INFO:__main__:‚úÖ –†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª BTC/USDT:USDT
INFO:__main__:üí∞ –ë–∞–ª–∞–Ω—Å USDT: 5.641e-05
INFO:__main__:‚öñÔ∏è –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: 10x
INFO:__main__:üõí –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä: {'symbol': 'BTC/USDT:USDT', 'type': 'market', 'side': 'buy', 'amount': 0.001, 'params': {'reduceOnly': False}}
ERROR:__main__:‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: bybit {"retCode":110007,"retMsg":"ab not enough for new order","result":{},"retExtInfo":{},"time":1759834563932}
–†–µ–∑—É–ª—å—Ç–∞—Ç: {'success': False, 'error': '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: bybit {"retCode":110007,"retMsg":"ab not enough for new order","result":{},"retExtInfo":{},"time":1759834563932}'}
–ë–∞–ª–∞–Ω—Å: {'USDC': 0.00257, 'ARB': 0.00012, 'ETH': 5.12e-06, 'USDT': 5.641e-05, 'TAIKO': 0.005}
    
    """
