import ccxt
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def buy_future_bybit_mainnet(api_key: str, api_secret: str, symbol: str, amount: float,
                             order_type: str = 'market', price: float = None,
                             leverage: int = 10, reduce_only: bool = False):
    """
    –ü–æ–∫—É–ø–∫–∞ —Ñ—å—é—á–µ—Ä—Å–∞ –Ω–∞ Bybit mainnet

    :param api_key: API –∫–ª—é—á –æ—Ç mainnet
    :param api_secret: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç mainnet
    :param symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTC/USDT:USDT)
    :param amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    :param order_type: 'market' –∏–ª–∏ 'limit'
    :param price: –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    :param leverage: –ü–ª–µ—á–æ
    :param reduce_only: –¢–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–¥–µ—Ä–∞
    """

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è mainnet
        exchange = ccxt.bybit({
            'apiKey': api_key,
            'secret': api_secret,
            'sandbox': False,  # FALSE –¥–ª—è mainnet!
            'options': {
                'defaultType': 'linear',
            },
            'enableRateLimit': True,
        })

        logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit mainnet...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
        markets = exchange.load_markets()
        logger.info(f"‚úÖ –†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª {symbol}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞
        if symbol not in markets:
            available_symbols = [s for s in markets.keys() if 'USDT' in s][:5]
            raise Exception(f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_symbols}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = exchange.fetch_balance()
        usdt_balance = balance['total'].get('USDT', 0)
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance}")

        if usdt_balance <= 0:
            raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
        try:
            exchange.set_leverage(leverage, symbol)
            logger.info(f"‚öñÔ∏è –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {leverage}x")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ: {e}")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
        order_params = {
            'symbol': symbol,
            'type': order_type,
            'side': 'buy',
            'amount': amount,
            'params': {
                'reduceOnly': reduce_only,
            }
        }

        # –î–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
        if order_type == 'limit' and price is not None:
            order_params['price'] = price

        logger.info(f"üõí –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä: {order_params}")

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
        order = exchange.create_order(**order_params)

        logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ID: {order['id']}")
        return {
            'success': True,
            'order_id': order['id'],
            'symbol': order['symbol'],
            'side': order['side'],
            'type': order['type'],
            'amount': order['amount'],
            'price': order.get('price'),
            'status': order['status']
        }

    except ccxt.AuthenticationError as e:
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:"
        error_msg += "\n1. –ö–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ https://www.bybit.com/"
        error_msg += "\n2. –í–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ Trade"
        error_msg += "\n3. –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ IP"
        error_msg += f"\n–î–µ—Ç–∞–ª–∏: {e}"
        logger.error(error_msg)
        return {'success': False, 'error': error_msg}

    except ccxt.InsufficientFunds as e:
        error_msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {e}"
        logger.error(error_msg)
        return {'success': False, 'error': error_msg}

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {e}"
        logger.error(error_msg)
        return {'success': False, 'error': error_msg}


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_balance_mainnet(api_key: str, api_secret: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ mainnet"""
    exchange = ccxt.bybit({
        'apiKey': api_key,
        'secret': api_secret,
        'sandbox': False,
    })

    balance = exchange.fetch_balance()
    return balance


def cancel_order_mainnet(api_key: str, api_secret: str, order_id: str, symbol: str):
    """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
    exchange = ccxt.bybit({
        'apiKey': api_key,
        'secret': api_secret,
        'sandbox': False,
    })

    return exchange.cancel_order(order_id, symbol)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –æ—Ç mainnet
    from multy_trader.multy_trader import settings

    API_KEY = settings.BYBIT_API_KEY
    API_SECRET = settings.BYBIT_SECRET_KEY

    # –ü—Ä–∏–º–µ—Ä –ø–æ–∫—É–ø–∫–∏
    result = buy_future_bybit_mainnet(
        api_key=API_KEY,
        api_secret=API_SECRET,
        symbol="BTC/USDT:USDT",
        amount=0.001,
        order_type='market',
        leverage=10
    )

    print("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    balance = get_balance_mainnet(API_KEY, API_SECRET)
    print("–ë–∞–ª–∞–Ω—Å:", balance['total'])

    """ LOGS
    INFO:__main__:üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Bybit mainnet...
INFO:__main__:‚úÖ –†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª BTC/USDT:USDT
INFO:__main__:üí∞ –ë–∞–ª–∞–Ω—Å USDT: 5.641e-05
INFO:__main__:‚öñÔ∏è –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: 10x
INFO:__main__:üõí –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä: {'symbol': 'BTC/USDT:USDT', 'type': 'market', 'side': 'buy', 'amount': 0.001, 'params': {'reduceOnly': False}}
ERROR:__main__:‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: bybit {"retCode":110007,"retMsg":"ab not enough for new order","result":{},"retExtInfo":{},"time":1759834563932}
–†–µ–∑—É–ª—å—Ç–∞—Ç: {'success': False, 'error': '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: bybit {"retCode":110007,"retMsg":"ab not enough for new order","result":{},"retExtInfo":{},"time":1759834563932}'}
–ë–∞–ª–∞–Ω—Å: {'USDC': 0.00257, 'ARB': 0.00012, 'ETH': 5.12e-06, 'USDT': 5.641e-05, 'TAIKO': 0.005}
    
    """
